@page "/adminproducts"
@using ProductShopDemo.Models;
@using ProductShopDemo.Services;
@inject IProductService ProductService

@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Admin Products</h1>

@if (pagedResult == null)
{
    <p><em>Loading...</em></p>
}
else if (pagedResult.Items.Count == 0)
{
    <p><em>No products found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
                <th>Description</th>
                <th>Subtype</th>
                <th>Type</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in pagedResult.Items)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Description</td>
                    <td>@product.ProductSubtype.Name</td>
                    <td>@product.ProductSubtype.ProductType.Name</td>
                    <td>
                        <a href="@($"products/{product.Id}")">Details</a>
                        <a href="@($"products/edit/{product.Id}")">Edit</a>
                        <button class="btn btn-danger btn-sm" @onclick="(() => Delete(product.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-between">
        @if (pagedResult.HasPreviousPage)
        {
            <button class="btn btn-primary" @onclick="PreviousPage">Previous</button>
        }
        <span>Page @pagedResult.PageIndex of @pagedResult.TotalPages</span>
        @if (pagedResult.HasNextPage)
        {
            <button class="btn btn-primary" @onclick="NextPage">Next</button>
        }
    </div>
}

@code {
    private PagedResult<Product> pagedResult;
    private const int PAGE_SIZE = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData(int pageNumber = 1)
    {
        pagedResult = await ProductService.GetProductsPaged(pageNumber, PAGE_SIZE);
    }

    private async Task NextPage()
    {
        await LoadData(pagedResult.PageIndex + 1);
    }

    private async Task PreviousPage()
    {
        await LoadData(pagedResult.PageIndex - 1);
    }

    private async Task Delete(int id)
    {
        //bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        //bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        //if (confirm)
        //{
        //    await ProductService.DeleteProduct(id);
        //    await LoadData();
        //}

        await ProductService.DeleteProduct(id);
        await LoadData();
    }
}
