@page "/adminproducts"
@using ProductShopDemo.Models;
@using ProductShopDemo.Services;
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager NavigationManager
@inject IProductService ProductService


<h1>Products</h1>
<br />
<a href="/adminproducts/create" class="btn btn-primary">Create</a>
<br/>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Description</th>
                <th>Type</th>
                <th>Subtype</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model.Items)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Description</td>
                    <td>@product.ProductSubtype.ProductType.Name</td>
                    <td>@product.ProductSubtype.Name</td>
                    <td>
                    <button class="btn btn-info">Details</button>
                    <button class="btn btn-warning">Edit</button>
                    <button class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>



    <nav>
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item"><a class="page-link" href="@GetPageUrl(Model.PageIndex - 1)">Previous</a></li>
            }
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.PageIndex)
                {
                    <li class="page-item active"><span class="page-link">@i</span></li>
                }
                else
                {
                    <li class="page-item"><a class="page-link" href="@GetPageUrl(i)">@i</a></li>
                }
            }
            @if (Model.HasNextPage)
            {
                <li class="page-item"><a class="page-link" href="@GetPageUrl(Model.PageIndex + 1)">Next</a></li>
            }
        </ul>
    </nav>

@code {
    [Parameter]
    public int Page { get; set; } = 1;

    private PaginationResult<Product> Model { get; set; } = new PaginationResult<Product>(new List<Product>(), 0, 1, 10);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Model = await ProductService.GetProductsAsync(Page);
    }

    private string GetPageUrl(int pageIndex)
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        query["page"] = pageIndex.ToString();
        return uri.GetLeftPart(UriPartial.Path) + QueryString.Create(query);
    }
}
