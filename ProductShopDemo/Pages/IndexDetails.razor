@page "/{id:int}"
@using ProductShopDemo.DTO;
@using ProductShopDemo.Models
@using ProductShopDemo.Services
@using System.Text.Json;

@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<div class="container">

    <h1>Product "@productModel.Name" Details</h1>
    <br />
    <a href="/" class="btn btn-info mb-4">
        <span class="oi oi-arrow-left" aria-hidden="true"></span>
        Back
    </a>
    <br />

    <div class="row">
        <div class="col-md-6">
            <img class="card-img-top" src="https://via.placeholder.com/700x400" alt="@productModel.Name">
        </div>

        <div class="col-md-6">
            <h3>Product @productModel.Name</h3>
            <p>@productModel.Name</p>
            <p>@productModel.Description</p>
            <p>@productModel.Price</p>
        </div>
    </div>

</div>


@code {
    private ProductDTO productModel = new ProductDTO();
    private List<ProductType> productTypes = new List<ProductType>();
    private List<ProductSubtype> allProductSubtypes = new List<ProductSubtype>();
    private List<ProductSubtype> subtypesForSelectedType = new List<ProductSubtype>();
    private string ErrorMessage = "";
    private const string localStorageKey = "recentlyViewed";

    [Parameter]
    public int Id { get; set; }

    protected void onError(string message)
    {
        ErrorMessage = $"Error happened: {message}";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productTypes = await ProductService.GetProductTypesAsync();
            allProductSubtypes = await ProductService.GetProductSubtypesAsync();
            subtypesForSelectedType = allProductSubtypes.Where(s => s.ProductTypeId == productModel.ProductSubtype?.ProductType?.Id).ToList();

            productModel = await ProductService.GetProductAsync(Id);

            // Add the product to the recently viewed list in local storage
            var recentlyViewedJson = await jsRuntime.InvokeAsync<string>("localStorage.getItem", localStorageKey);
            var recentlyViewed = string.IsNullOrEmpty(recentlyViewedJson) ? new List<int>() : JsonSerializer.Deserialize<List<int>>(recentlyViewedJson);

            if (!recentlyViewed.Contains(Id))
            {
                recentlyViewed.Add(Id);
                if (recentlyViewed.Count > 10)
                {
                    recentlyViewed.RemoveAt(0);
                }

                var recentlyViewedJsonNew = JsonSerializer.Serialize(recentlyViewed);
                await jsRuntime.InvokeVoidAsync("localStorage.setItem", localStorageKey, recentlyViewedJsonNew);
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Can't find product"))
            {
                onError(ex.Message);
            }
            else
            {
                onError($"Unhandled exception. {ex.Message}");
            }
        }

    }

    private void OnProductTypeChanged(ChangeEventArgs e)
    {
        int productTypeId = Convert.ToInt32(e.Value);
        subtypesForSelectedType = allProductSubtypes.Where(s => s.ProductTypeId == productTypeId).ToList();
        productModel.ProductSubtype = subtypesForSelectedType.FirstOrDefault();
    }

    private async Task<ProductDTO> OnSubmit()
    {
        if (Id == null)
        {
            NavigationManager.NavigateTo("/");
            return null;
        }
        else
        {
            var productInputDTO = new ProductInputDTO();

            productInputDTO.Name = productModel.Name;
            productInputDTO.Description = productModel.Description;
            productInputDTO.Price = productModel.Price;
            productInputDTO.ProductSubtype = productModel.ProductSubtype;
            productInputDTO.ProductSubtypeId = productModel.ProductSubtypeId;


            var res = await ProductService.UpdateProductAsync(productInputDTO);
            return res;
        }

    }

}
